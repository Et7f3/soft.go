// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEClass() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEClassAbstractGet(t *testing.T) {
	v := true
	obj := newEClassImpl()
	obj.SetAbstract(v)
	assert.Equal(t, v, obj.IsAbstract())
}

func TestEClassAbstractSet(t *testing.T) {
	obj := newEClassImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetAbstract(v)
	mockAdapter.AssertExpectations(t)
}

func TestEClassInterfaceGet(t *testing.T) {
	v := true
	obj := newEClassImpl()
	obj.SetInterface(v)
	assert.Equal(t, v, obj.IsInterface())
}

func TestEClassInterfaceSet(t *testing.T) {
	obj := newEClassImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetInterface(v)
	mockAdapter.AssertExpectations(t)
}

func TestEClassEStructuralFeaturesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEStructuralFeatures())
}

func TestEClassEAttributesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAttributes())
}

func TestEClassEReferencesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEReferences())
}

func TestEClassESuperTypesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetESuperTypes())
}

func TestEClassEOperationsGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEOperations())
}

func TestEClassEContainmentFeaturesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEContainmentFeatures())
}

func TestEClassECrossReferenceFeaturesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetECrossReferenceFeatures())
}

func TestEClassEAllAttributesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllAttributes())
}

func TestEClassEAllReferencesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllReferences())
}

func TestEClassEAllContainmentsGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllContainments())
}

func TestEClassEAllOperationsGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllOperations())
}

func TestEClassEAllStructuralFeaturesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllStructuralFeatures())
}

func TestEClassEAllSuperTypesGetList(t *testing.T) {
	o := newEClassImpl()
	assert.NotNil(t, o.GetEAllSuperTypes())
}

func TestEClassIsSuperTypeOfOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.IsSuperTypeOf(nil) })
}
func TestEClassGetFeatureCountOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetFeatureCount() })
}
func TestEClassGetEStructuralFeatureOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetEStructuralFeature(0) })
}
func TestEClassGetEStructuralFeatureFromNameOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetEStructuralFeatureFromName("") })
}
func TestEClassGetFeatureIDOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetFeatureID(nil) })
}
func TestEClassGetOperationCountOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetOperationCount() })
}
func TestEClassGetEOperationOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetEOperation(0) })
}
func TestEClassGetOperationIDOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetOperationID(nil) })
}
func TestEClassGetOverrideOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetOverride(nil) })
}
func TestEClassGetFeatureTypeOperation(t *testing.T) {
	o := newEClassImpl()
	assert.Panics(t, func() { o.GetFeatureType(nil) })
}
