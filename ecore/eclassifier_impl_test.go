// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"reflect"
	"testing"
)

func discardEClassifier() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEClassifierInstanceClassGet(t *testing.T) {
	v := reflect.Type(nil)
	obj := newEClassifierImpl()
	obj.SetInstanceClass(v)
	assert.Equal(t, v, obj.GetInstanceClass())
}

func TestEClassifierInstanceClassSet(t *testing.T) {
	obj := newEClassifierImpl()
	v := reflect.Type(nil)
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetInstanceClass(v)
	mockAdapter.AssertExpectations(t)
}

func TestEClassifierClassifierIDGet(t *testing.T) {
	v := 45
	obj := newEClassifierImpl()
	obj.SetClassifierID(v)
	assert.Equal(t, v, obj.GetClassifierID())
}

func TestEClassifierClassifierIDSet(t *testing.T) {
	obj := newEClassifierImpl()
	v := 45
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetClassifierID(v)
	mockAdapter.AssertExpectations(t)
}

func TestEClassifierIsInstanceOperation(t *testing.T) {
	o := newEClassifierImpl()
	assert.Panics(t, func() { o.IsInstance(nil) })
}
