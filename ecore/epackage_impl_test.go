// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEPackage() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEPackageNsURIGet(t *testing.T) {
	v := "Test String"
	obj := newEPackageImpl()
	obj.SetNsURI(v)
	assert.Equal(t, v, obj.GetNsURI())
}

func TestEPackageNsURISet(t *testing.T) {
	obj := newEPackageImpl()
	v := "Test String"
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetNsURI(v)
	mockAdapter.AssertExpectations(t)
}

func TestEPackageNsPrefixGet(t *testing.T) {
	v := "Test String"
	obj := newEPackageImpl()
	obj.SetNsPrefix(v)
	assert.Equal(t, v, obj.GetNsPrefix())
}

func TestEPackageNsPrefixSet(t *testing.T) {
	obj := newEPackageImpl()
	v := "Test String"
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetNsPrefix(v)
	mockAdapter.AssertExpectations(t)
}

func TestEPackageEFactoryInstanceSet(t *testing.T) {
	obj := newEPackageImpl()
	v := &MockEFactory{}
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetEFactoryInstance(v)
	mockAdapter.AssertExpectations(t)
}

func TestEPackageEClassifiersGetList(t *testing.T) {
	o := newEPackageImpl()
	assert.NotNil(t, o.GetEClassifiers())
}

func TestEPackageESubPackagesGetList(t *testing.T) {
	o := newEPackageImpl()
	assert.NotNil(t, o.GetESubPackages())
}

func TestEPackageGetEClassifierOperation(t *testing.T) {
	o := newEPackageImpl()
	assert.Panics(t, func() { o.GetEClassifier("") })
}
