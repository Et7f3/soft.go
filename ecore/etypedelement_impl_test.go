// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardETypedElement() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

}

func TestETypedElementOrderedGet(t *testing.T) {
	var newValue bool = true
	obj := newETypedElementImpl()
	obj.SetOrdered(newValue)
	assert.Equal(t, newValue, obj.IsOrdered())
}

func TestETypedElementOrderedSet(t *testing.T) {
	var newValue bool = true
	obj := newETypedElementImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetOrdered(newValue)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementUniqueGet(t *testing.T) {
	var newValue bool = true
	obj := newETypedElementImpl()
	obj.SetUnique(newValue)
	assert.Equal(t, newValue, obj.IsUnique())
}

func TestETypedElementUniqueSet(t *testing.T) {
	var newValue bool = true
	obj := newETypedElementImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetUnique(newValue)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementLowerBoundGet(t *testing.T) {
	var newValue int = 45
	obj := newETypedElementImpl()
	obj.SetLowerBound(newValue)
	assert.Equal(t, newValue, obj.GetLowerBound())
}

func TestETypedElementLowerBoundSet(t *testing.T) {
	var newValue int = 45
	obj := newETypedElementImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetLowerBound(newValue)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementUpperBoundGet(t *testing.T) {
	var newValue int = 45
	obj := newETypedElementImpl()
	obj.SetUpperBound(newValue)
	assert.Equal(t, newValue, obj.GetUpperBound())
}

func TestETypedElementUpperBoundSet(t *testing.T) {
	var newValue int = 45
	obj := newETypedElementImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetUpperBound(newValue)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementETypeGet(t *testing.T) {
	var newValue *MockEClassifier = &MockEClassifier{}
	newValue.On("EIsProxy").Return(false)
	obj := newETypedElementImpl()
	obj.SetEType(newValue)
	assert.Equal(t, newValue, obj.GetEType())
}

func TestETypedElementETypeSet(t *testing.T) {
	var newValue *MockEClassifier = &MockEClassifier{}
	obj := newETypedElementImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetEType(newValue)
	mockAdapter.AssertExpectations(t)
}
