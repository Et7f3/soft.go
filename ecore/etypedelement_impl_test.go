// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardETypedElement() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestETypedElementOrderedGet(t *testing.T) {
	v := true
	obj := newETypedElementImpl()
	obj.SetOrdered(v)
	assert.Equal(t, v, obj.IsOrdered())
}

func TestETypedElementOrderedSet(t *testing.T) {
	obj := newETypedElementImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetOrdered(v)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementUniqueGet(t *testing.T) {
	v := true
	obj := newETypedElementImpl()
	obj.SetUnique(v)
	assert.Equal(t, v, obj.IsUnique())
}

func TestETypedElementUniqueSet(t *testing.T) {
	obj := newETypedElementImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetUnique(v)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementLowerBoundGet(t *testing.T) {
	v := 45
	obj := newETypedElementImpl()
	obj.SetLowerBound(v)
	assert.Equal(t, v, obj.GetLowerBound())
}

func TestETypedElementLowerBoundSet(t *testing.T) {
	obj := newETypedElementImpl()
	v := 45
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetLowerBound(v)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementUpperBoundGet(t *testing.T) {
	v := 45
	obj := newETypedElementImpl()
	obj.SetUpperBound(v)
	assert.Equal(t, v, obj.GetUpperBound())
}

func TestETypedElementUpperBoundSet(t *testing.T) {
	obj := newETypedElementImpl()
	v := 45
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetUpperBound(v)
	mockAdapter.AssertExpectations(t)
}

func TestETypedElementETypeGet(t *testing.T) {
	v := &MockEClassifier{}
	v.On("EIsProxy").Return(false)
	obj := newETypedElementImpl()
	obj.SetEType(v)
	assert.Equal(t, v, obj.GetEType())
}

func TestETypedElementETypeSet(t *testing.T) {
	obj := newETypedElementImpl()
	v := &MockEClassifier{}
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetEType(v)
	mockAdapter.AssertExpectations(t)
}
