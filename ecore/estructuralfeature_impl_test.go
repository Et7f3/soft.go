// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEStructuralFeature() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEStructuralFeatureChangeableGet(t *testing.T) {
	v := true
	obj := newEStructuralFeatureImpl()
	obj.SetChangeable(v)
	assert.Equal(t, v, obj.IsChangeable())
}

func TestEStructuralFeatureChangeableSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetChangeable(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureVolatileGet(t *testing.T) {
	v := true
	obj := newEStructuralFeatureImpl()
	obj.SetVolatile(v)
	assert.Equal(t, v, obj.IsVolatile())
}

func TestEStructuralFeatureVolatileSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetVolatile(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureTransientGet(t *testing.T) {
	v := true
	obj := newEStructuralFeatureImpl()
	obj.SetTransient(v)
	assert.Equal(t, v, obj.IsTransient())
}

func TestEStructuralFeatureTransientSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetTransient(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureDefaultValueLiteralGet(t *testing.T) {
	v := "Test String"
	obj := newEStructuralFeatureImpl()
	obj.SetDefaultValueLiteral(v)
	assert.Equal(t, v, obj.GetDefaultValueLiteral())
}

func TestEStructuralFeatureDefaultValueLiteralSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	v := "Test String"
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetDefaultValueLiteral(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureUnsettableGet(t *testing.T) {
	v := true
	obj := newEStructuralFeatureImpl()
	obj.SetUnsettable(v)
	assert.Equal(t, v, obj.IsUnsettable())
}

func TestEStructuralFeatureUnsettableSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetUnsettable(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureDerivedGet(t *testing.T) {
	v := true
	obj := newEStructuralFeatureImpl()
	obj.SetDerived(v)
	assert.Equal(t, v, obj.IsDerived())
}

func TestEStructuralFeatureDerivedSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	v := true
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetDerived(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureFeatureIDGet(t *testing.T) {
	v := 45
	obj := newEStructuralFeatureImpl()
	obj.SetFeatureID(v)
	assert.Equal(t, v, obj.GetFeatureID())
}

func TestEStructuralFeatureFeatureIDSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	v := 45
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetFeatureID(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureGetContainerClassOperation(t *testing.T) {
	o := newEStructuralFeatureImpl()
	assert.Panics(t, func() { o.GetContainerClass() })
}
