// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEClass() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEClassIsAbstract tests method IsAbstract
func TestMockEClassIsAbstract(t *testing.T) {
	o := &MockEClass{}
	r := true
	o.On("IsAbstract").Once().Return(r)
	assert.Equal(t, r, o.IsAbstract())

	o.On("IsAbstract").Once().Return(func() bool {
		return r
	})
	assert.Equal(t, r, o.IsAbstract())
	o.AssertExpectations(t)
}

// TestMockEClassSetAbstract tests method SetAbstract
func TestMockEClassSetAbstract(t *testing.T) {
	o := &MockEClass{}
	v := true
	o.On("SetAbstract", v).Once()

	o.SetAbstract(v)
	o.AssertExpectations(t)
}

// TestGetEAllAttributes tests method GetEAllAttributes
func TestGetEAllAttributes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEAllAttributes").Once().Return(l)
	assert.Equal(t, l, o.GetEAllAttributes())

	o.On("GetEAllAttributes").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEAllAttributes())
	o.AssertExpectations(t)
}

// TestGetEAllContainments tests method GetEAllContainments
func TestGetEAllContainments(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEAllContainments").Once().Return(l)
	assert.Equal(t, l, o.GetEAllContainments())

	o.On("GetEAllContainments").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEAllContainments())
	o.AssertExpectations(t)
}

// TestGetEAllOperations tests method GetEAllOperations
func TestGetEAllOperations(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEAllOperations").Once().Return(l)
	assert.Equal(t, l, o.GetEAllOperations())

	o.On("GetEAllOperations").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEAllOperations())
	o.AssertExpectations(t)
}

// TestGetEAllReferences tests method GetEAllReferences
func TestGetEAllReferences(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEAllReferences").Once().Return(l)
	assert.Equal(t, l, o.GetEAllReferences())

	o.On("GetEAllReferences").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEAllReferences())
	o.AssertExpectations(t)
}

// TestGetEAllStructuralFeatures tests method GetEAllStructuralFeatures
func TestGetEAllStructuralFeatures(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEAllStructuralFeatures").Once().Return(l)
	assert.Equal(t, l, o.GetEAllStructuralFeatures())

	o.On("GetEAllStructuralFeatures").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEAllStructuralFeatures())
	o.AssertExpectations(t)
}

// TestGetEAllSuperTypes tests method GetEAllSuperTypes
func TestGetEAllSuperTypes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEAllSuperTypes").Once().Return(l)
	assert.Equal(t, l, o.GetEAllSuperTypes())

	o.On("GetEAllSuperTypes").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEAllSuperTypes())
	o.AssertExpectations(t)
}

// TestGetEAttributes tests method GetEAttributes
func TestGetEAttributes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEAttributes").Once().Return(l)
	assert.Equal(t, l, o.GetEAttributes())

	o.On("GetEAttributes").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEAttributes())
	o.AssertExpectations(t)
}

// TestGetEContainments tests method GetEContainments
func TestGetEContainments(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEContainments").Once().Return(l)
	assert.Equal(t, l, o.GetEContainments())

	o.On("GetEContainments").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEContainments())
	o.AssertExpectations(t)
}

// TestGetECrossReferences tests method GetECrossReferences
func TestGetECrossReferences(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetECrossReferences").Once().Return(l)
	assert.Equal(t, l, o.GetECrossReferences())

	o.On("GetECrossReferences").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetECrossReferences())
	o.AssertExpectations(t)
}

// TestMockEClassGetEIDAttribute tests method GetEIDAttribute
func TestMockEClassGetEIDAttribute(t *testing.T) {
	o := &MockEClass{}
	r := &MockEAttribute{}
	o.On("GetEIDAttribute").Once().Return(r)
	assert.Equal(t, r, o.GetEIDAttribute())

	o.On("GetEIDAttribute").Once().Return(func() EAttribute {
		return r
	})
	assert.Equal(t, r, o.GetEIDAttribute())
	o.AssertExpectations(t)
}

// TestGetEOperations tests method GetEOperations
func TestGetEOperations(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEOperations").Once().Return(l)
	assert.Equal(t, l, o.GetEOperations())

	o.On("GetEOperations").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEOperations())
	o.AssertExpectations(t)
}

// TestGetEReferences tests method GetEReferences
func TestGetEReferences(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEReferences").Once().Return(l)
	assert.Equal(t, l, o.GetEReferences())

	o.On("GetEReferences").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEReferences())
	o.AssertExpectations(t)
}

// TestGetEStructuralFeatures tests method GetEStructuralFeatures
func TestGetEStructuralFeatures(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetEStructuralFeatures").Once().Return(l)
	assert.Equal(t, l, o.GetEStructuralFeatures())

	o.On("GetEStructuralFeatures").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetEStructuralFeatures())
	o.AssertExpectations(t)
}

// TestGetESuperTypes tests method GetESuperTypes
func TestGetESuperTypes(t *testing.T) {
	o := &MockEClass{}
	l := &MockEList{}
	o.On("GetESuperTypes").Once().Return(l)
	assert.Equal(t, l, o.GetESuperTypes())

	o.On("GetESuperTypes").Once().Return(func() EList {
		return l
	})
	assert.Equal(t, l, o.GetESuperTypes())
	o.AssertExpectations(t)
}

// TestMockEClassIsInterface tests method IsInterface
func TestMockEClassIsInterface(t *testing.T) {
	o := &MockEClass{}
	r := true
	o.On("IsInterface").Once().Return(r)
	assert.Equal(t, r, o.IsInterface())

	o.On("IsInterface").Once().Return(func() bool {
		return r
	})
	assert.Equal(t, r, o.IsInterface())
	o.AssertExpectations(t)
}

// TestMockEClassSetInterface tests method SetInterface
func TestMockEClassSetInterface(t *testing.T) {
	o := &MockEClass{}
	v := true
	o.On("SetInterface", v).Once()

	o.SetInterface(v)
	o.AssertExpectations(t)
}
