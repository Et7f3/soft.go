// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEReference() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

}

func TestEReferenceContainmentGet(t *testing.T) {
	var newValue bool = true
	obj := newEReferenceImpl()
	obj.SetContainment(newValue)
	assert.Equal(t, newValue, obj.IsContainment())
}

func TestEReferenceContainmentSet(t *testing.T) {
	var newValue bool = true
	obj := newEReferenceImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetContainment(newValue)
	mockAdapter.AssertExpectations(t)
}

func TestEReferenceResolveProxiesGet(t *testing.T) {
	var newValue bool = true
	obj := newEReferenceImpl()
	obj.SetResolveProxies(newValue)
	assert.Equal(t, newValue, obj.IsResolveProxies())
}

func TestEReferenceResolveProxiesSet(t *testing.T) {
	var newValue bool = true
	obj := newEReferenceImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetResolveProxies(newValue)
	mockAdapter.AssertExpectations(t)
}

func TestEReferenceEOppositeGet(t *testing.T) {
	var newValue *MockEReference = &MockEReference{}
	newValue.On("EIsProxy").Return(false)
	obj := newEReferenceImpl()
	obj.SetEOpposite(newValue)
	assert.Equal(t, newValue, obj.GetEOpposite())
}

func TestEReferenceEOppositeSet(t *testing.T) {
	var newValue *MockEReference = &MockEReference{}
	obj := newEReferenceImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetEOpposite(newValue)
	mockAdapter.AssertExpectations(t)
}

func TestEReferenceEKeysGetList(t *testing.T) {
	obj := newEReferenceImpl()
	assert.NotNil(t, obj.GetEKeys())
}
